import os
import numpy as np

from modules.simulation.lammps_parser import LammpsLogParser
from src.modules.simulation.sim_case.sim_case_interface import SimCaseInterface
from src.modules.simulation.sim_data.data_interface import OutputSimData
from src.modules.simulation.sim_data.data_interface import ThermoData

from utilities.files.file_reader import GeneralFileReader
from src.modules.simulation.sim_file_reader.global_timeavg_property_reader import GlobalTimeAvgPropertyReader
from src.modules.simulation.forcefield.forcefield import ForceFieldInterface
from modules.config_loaders.config_loader import ConfigLoader
from src.modules.simulation.sim_case.sim_case_interface import SimCaseFileFolderManager

from src.modules.simulation.component.particle.particle import Particle
from src.modules.simulation.component.particle.particles import Particles
from src.modules.simulation.sim_file_reader.prop_profile_data_reader import PropProfileReader
from src.utilities.manage_file_folder import filter_files_by_word
from src.utilities.manage_file_folder import get_file_names_and_paths
from src.utilities.manage_file_folder import find_files_with_extension
from src.modules.simulation.sim_file_reader.print_property_reader import PrintPropertyReader


class LAMMPSSimCase(SimCaseInterface):

    def __init__(self, sim_case_file_folder: SimCaseFileFolderManager, lmp_log_parser: LammpsLogParser, particles: Particles,
                 forcefield: ForceFieldInterface, config_loader: ConfigLoader,
                 thermo_data: ThermoData):
        self._sim_case_file_folder = sim_case_file_folder
        self._lmp_log_parser = lmp_log_parser
        self._forcefield = forcefield
        self._particles = particles
        self._thermo_data = thermo_data
        self._sim_out_data = OutputSimData()
        self._global_props = None
        self.num_atom_types = 0
        self.Natoms = 0
        self.configs = config_loader.load_configs()

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        return False

    def _update_particles_number(self):
        self.Natoms = sum([particle._count for particle in self._particles.particles])
        self.num_atom_types = len(self._particles.particles)

    @property
    def sim_case_file_folder(self) -> SimCaseFileFolderManager:
        return self._sim_case_file_folder

    @sim_case_file_folder.setter
    def sim_case_file_folder(self, value: SimCaseFileFolderManager):
        self._sim_case_file_folder = value

    @property
    def sim_out_data(self):
        return self._sim_out_data

    @property
    def thermo_data(self):
        return self._thermo_data

    @thermo_data.setter
    def thermo_data(self, value):
        self._thermo_data = value

    @property
    def particles(self) -> Particles:
        return self._particles

    @particles.setter
    def particles(self, value: Particles):
        self._particles = value
        self._update_particles_number()

    @property
    def global_props(self):
        return self._global_props

    @global_props.setter
    def global_props(self, value):
        self._global_props = value

    @property
    def forcefield(self) -> ForceFieldInterface:
        return self._forcefield

    @forcefield.setter
    def forcefield(self, value: ForceFieldInterface):
        self._forcefield = value

    # A method to read the input simulation data.
    def read_input_data(self, data_types_to_read):
        self._read_thermo_data() if "thermo" in data_types_to_read and self.thermo_data.is_all_none() else ...
        self._get_number_of_particles() if "particles" in data_types_to_read else ...
        self._read_ff_params() if "ff" in data_types_to_read else ...

    # A method to read the output data generated by the simulator.
    def read_output_data(self, data_to_read_dict):
        self._read_irwork_data() if "fe" in data_to_read_dict else ...
        self._read_msd_data() if "msd" in data_to_read_dict else ...
        self._read_rdf_data() if "rdf" in data_to_read_dict else ...
        self._read_global_props(header_line_number=1) if "global_props" in data_to_read_dict else ...
        self._read_print_props() if "print_props" in data_to_read_dict else ...
        self._read_density_profiles(data_to_read_dict["density_profiles"]) if "density_profiles" in data_to_read_dict else ...

    def _read_ff_params(self):
        # Get the path to the force field file from the simulation output log
        ff_file_path = self._lmp_log_parser.get_text_using_label(label='pair_coeff', output_text_pos=3, instance_match_num=2)
        self.forcefield.read_params(ff_file_path)

    def _get_number_of_particles(self):
        # Get the list of all particles
        particle_info = self._lmp_log_parser.get_number_of_particles()
        for particle_name, count in particle_info:
            self.particles.add_particle(Particle(name=particle_name, count=count))

        self._update_particles_number()

    def _read_thermo_data(self):
        self.thermo_data.Press = self._lmp_log_parser.get_value_of_variable("pEql", "v")
        self.thermo_data.Temp = self._lmp_log_parser.get_value_of_variable("TEql", "v")
        self.thermo_data.Vol = self._lmp_log_parser.get_value_of_variable("Volume after nph:", "p")

    def _read_print_props(self):
        path_to_print_prop_file = find_files_with_extension(self.sim_case_file_folder.sim_case_path,
                                                            self.configs["FileExtensions"]["PRINT_PROPS"])
        if len(path_to_print_prop_file) == 1:
            general_file_reader = GeneralFileReader(path_to_print_prop_file[0])
            print_props = PrintPropertyReader(general_file_reader).read()
            self.sim_out_data.add('print_props', print_props)
        else:
            raise Exception(
                f"Error: more than one {self.configs['FileExtensions']['PRINT_PROPS']} file found in {self.sim_case_file_folder.sim_case_path}.")

    def _read_density_profiles(self, inputs):
        density_profiles = []
        density_profile_fns = inputs["file_names"]
        for filename in density_profile_fns:
            file_path = os.path.join(self.sim_case_file_folder.sim_case_path, filename)
            if file_path:
                try:
                    # Read the contents of the density profile.
                    general_file_reader = GeneralFileReader(file_path)
                    density_profile_reader = PropProfileReader(general_file_reader, inputs["starting_tstep"],
                                                               inputs["final_tstep"],
                                                               inputs["skipping_rows"])
                    density_profile = density_profile_reader.read(num_args_per_tstep_line=3)
                    density_profiles.append({"file_path": file_path, "profile": density_profile})
                except Exception as e:
                    print(f"Encountered following exception while reading the density profile:{e}")

            else:
                raise ValueError(f'No file path for the file: {filename}')

        self.sim_out_data.add('density_profiles', density_profiles) if density_profiles else ...

    def _read_global_props(self, header_line_number):
        found_path_to_global_props_file = find_files_with_extension(self.sim_case_file_folder.sim_case_path, self.configs["FileExtensions"][
            "GLOBAL_PROPS_TIME_AVERAGE"])

        if len(found_path_to_global_props_file) == 1:
            path_to_global_props_file = found_path_to_global_props_file[0]
        else:
            print(
                f"Warning: more than one {self.configs['FileExtensions']['GLOBAL_PROPS_TIME_AVERAGE']} file found in {self.sim_case_file_folder.sim_case_path}.")
            path_to_global_props_file = os.path.join(self.sim_case_file_folder.sim_case_path,
                                                     self.configs["FileNames"]["GLOBAL_PROPS_TIME_AVERAGED"])

        if path_to_global_props_file:
            general_file_reader = GeneralFileReader(path_to_global_props_file)
            global_props = GlobalTimeAvgPropertyReader(general_file_reader).read(header_line_number)
            self.sim_out_data.add('global_props', global_props)
        else:
            raise Exception(
                f"No file found for the global properties of the following simulation case:{self.sim_case_file_folder.sim_case_path} ")

    def _read_rdf_data(self):
        rdf_filename = find_files_with_extension(self.sim_case_file_folder.sim_case_path,
                                                 self.configs["FileExtensions"]["RDF_DATA"])
        if len(rdf_filename) == 1:
            rdf_lines = GeneralFileReader(rdf_filename[0]).read()
            self.sim_out_data.add('rdf', rdf_lines)
        else:
            raise Exception(f'Error: more than one RDF files found in {self.sim_case_file_folder.sim_case_path}.')

    def _read_irwork_data(self):
        fe_irwork = OutputSimData()
        fe_data_path = os.path.join(self.sim_case_file_folder.sim_case_path,
                                    self.configs["DirectoryPaths"]["REL_PATH_FE_DATA"])
        [filenames, file_paths] = get_file_names_and_paths(fe_data_path)
        # Check for "backward" and "forward" in filenames
        # Backward irreversible work.
        [_, filtered_file_paths] = filter_files_by_word(filenames, file_paths, 'backward')
        if len(filtered_file_paths) == 1:
            fe_backward_filepath = filtered_file_paths[0]
        else:
            # Now we should search for the filename in the config file.
            fe_backward_filename = self.configs["FileNames"]["NEFE_IRWORK_BACKWARD_FILENAME"]
            fe_backward_filepath = os.path.join(fe_data_path, fe_backward_filename)

        if fe_backward_filepath:
            dE, lam = np.loadtxt(fe_backward_filepath, unpack=True)
            backward = OutputSimData().add('dE', dE).add('lam', lam)
            fe_irwork.add('backward', backward)
        else:
            raise FileNotFoundError(f"No file found for the backward irreversible work in {fe_data_path}")

        # Forward irreversible work.
        [_, filtered_file_paths] = filter_files_by_word(filenames, file_paths, 'forward')
        if len(filtered_file_paths) == 1:
            fe_forward_filepath = filtered_file_paths[0]
        else:
            # Now we should search for the filename in the config file.
            fe_forward_filename = self.configs["FileNames"]["NEFE_IRWORK_FORWARD_FILENAME"]
            fe_forward_filepath = os.path.join(fe_data_path, fe_forward_filename)

        if fe_forward_filepath:
            dE, lam = np.loadtxt(filtered_file_paths[0], unpack=True)
            forward = OutputSimData().add('dE', dE).add('lam', lam)
            fe_irwork.add('forward', forward)
        else:
            raise FileNotFoundError(f"No file found for the forward irreversible work in {fe_data_path}")

        # Check if the files were found and read.
        if not fe_irwork.data:
            raise FileNotFoundError(f"Could not find any input free-energy files in the directory:{fe_data_path}")
        else:
            self.sim_out_data.add('fe_irwork', fe_irwork)

    def _read_msd_data(self, rows2skip=2):
        msd_data = OutputSimData()
        msd_data_path = os.path.join(self.sim_case_file_folder.sim_case_path,
                                     self.configs["DirectoryPaths"]["REL_PATH_MSD_DATA"])
        [filenames, file_paths] = get_file_names_and_paths(msd_data_path)
        # Check for "msd" in filenames
        [filtered_file_names, filtered_file_paths] = filter_files_by_word(filenames, file_paths, 'msd')
        for index, msd_file_path in enumerate(filtered_file_paths):
            time_steps, msd = np.loadtxt(msd_file_path, unpack=True, skiprows=rows2skip)
            current_msd_file_name = filtered_file_names[index].split('.')[0]
            tmp_msd_data = OutputSimData().add('time_steps', time_steps).add('msd', msd)
            msd_data.add(current_msd_file_name, tmp_msd_data)

        # Check if the files were found and read.
        if not msd_data.data:
            raise FileNotFoundError("Could not find any input msd files in the directory")
        else:
            self.sim_out_data.add('msd', msd_data)


if __name__ == '__main__':
    thermo_prop = ThermoData(T=258, p=100, vol=199003.12)
    lmp_sim_case = LAMMPSSimCase('../../../../data/simulations/water_co2_hydrate_sw_1',
                                 '../../../data/simulations/water_co2_hydrate_sw_1')
    lmp_sim_case.read_output_data(["rdf"])
    pass
